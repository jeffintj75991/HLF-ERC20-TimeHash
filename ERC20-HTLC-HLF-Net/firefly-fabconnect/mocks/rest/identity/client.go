// Code generated by mockery v2.29.0. DO NOT EDIT.

package mockidentity

import (
	http "net/http"

	identity "github.com/hyperledger/firefly-fabconnect/internal/rest/identity"
	httprouter "github.com/julienschmidt/httprouter"

	mock "github.com/stretchr/testify/mock"

	util "github.com/hyperledger/firefly-fabconnect/internal/rest/utils"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Enroll provides a mock function with given fields: res, req, params
func (_m *Client) Enroll(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.Response, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.Response
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.Response, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.Response); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Get provides a mock function with given fields: res, req, params
func (_m *Client) Get(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.Identity, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.Identity
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.Identity, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.Identity); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// List provides a mock function with given fields: res, req, params
func (_m *Client) List(res http.ResponseWriter, req *http.Request, params httprouter.Params) ([]*identity.Identity, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 []*identity.Identity
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) ([]*identity.Identity, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) []*identity.Identity); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*identity.Identity)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Modify provides a mock function with given fields: res, req, params
func (_m *Client) Modify(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.RegisterResponse, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.RegisterResponse
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.RegisterResponse, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.RegisterResponse); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Reenroll provides a mock function with given fields: res, req, params
func (_m *Client) Reenroll(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.Response, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.Response
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.Response, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.Response); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Register provides a mock function with given fields: res, req, params
func (_m *Client) Register(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.RegisterResponse, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.RegisterResponse
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.RegisterResponse, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.RegisterResponse); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

// Revoke provides a mock function with given fields: res, req, params
func (_m *Client) Revoke(res http.ResponseWriter, req *http.Request, params httprouter.Params) (*identity.RevokeResponse, *util.RestError) {
	ret := _m.Called(res, req, params)

	var r0 *identity.RevokeResponse
	var r1 *util.RestError
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) (*identity.RevokeResponse, *util.RestError)); ok {
		return rf(res, req, params)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, httprouter.Params) *identity.RevokeResponse); ok {
		r0 = rf(res, req, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*identity.RevokeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, httprouter.Params) *util.RestError); ok {
		r1 = rf(res, req, params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*util.RestError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
