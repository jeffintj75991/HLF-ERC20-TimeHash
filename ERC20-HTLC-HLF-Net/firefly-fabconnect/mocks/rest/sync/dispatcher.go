// Code generated by mockery v2.29.0. DO NOT EDIT.

package mocksync

import (
	context "context"
	http "net/http"

	httprouter "github.com/julienschmidt/httprouter"

	mock "github.com/stretchr/testify/mock"
)

// Dispatcher is an autogenerated mock type for the Dispatcher type
type Dispatcher struct {
	mock.Mock
}

// DispatchMsgSync provides a mock function with given fields: ctx, res, req, msg
func (_m *Dispatcher) DispatchMsgSync(ctx context.Context, res http.ResponseWriter, req *http.Request, msg interface{}) {
	_m.Called(ctx, res, req, msg)
}

// GetBlock provides a mock function with given fields: res, req, params
func (_m *Dispatcher) GetBlock(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	_m.Called(res, req, params)
}

// GetBlockByTxID provides a mock function with given fields: res, req, params
func (_m *Dispatcher) GetBlockByTxID(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	_m.Called(res, req, params)
}

// GetChainInfo provides a mock function with given fields: res, req, params
func (_m *Dispatcher) GetChainInfo(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	_m.Called(res, req, params)
}

// GetTxByID provides a mock function with given fields: res, req, params
func (_m *Dispatcher) GetTxByID(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	_m.Called(res, req, params)
}

// QueryChaincode provides a mock function with given fields: res, req, params
func (_m *Dispatcher) QueryChaincode(res http.ResponseWriter, req *http.Request, params httprouter.Params) {
	_m.Called(res, req, params)
}

type mockConstructorTestingTNewDispatcher interface {
	mock.TestingT
	Cleanup(func())
}

// NewDispatcher creates a new instance of Dispatcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDispatcher(t mockConstructorTestingTNewDispatcher) *Dispatcher {
	mock := &Dispatcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
